{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"blurhash\", \"thumbhash\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport resolveAssetSource from \"./resolveAssetSource\";\nimport { resolveBlurhashString, resolveThumbhashString } from \"./resolveHashString\";\nexport function isBlurhashString(str) {\n  return /^(blurhash:\\/)?[\\w#$%*+,\\-.:;=?@[\\]^_{}|~]+(\\/[\\d.]+)*$/.test(str);\n}\nexport function isThumbhashString(str) {\n  return str.startsWith('thumbhash:/');\n}\nfunction resolveSource(source) {\n  if (typeof source === 'string') {\n    if (isBlurhashString(source)) {\n      return resolveBlurhashString(source);\n    } else if (isThumbhashString(source)) {\n      return resolveThumbhashString(source);\n    }\n    return {\n      uri: source\n    };\n  }\n  if (typeof source === 'number') {\n    return resolveAssetSource(source);\n  }\n  if (typeof source === 'object' && (source != null && source.blurhash || source != null && source.thumbhash)) {\n    var blurhash = source.blurhash,\n      thumbhash = source.thumbhash,\n      restSource = _objectWithoutProperties(source, _excluded);\n    var resolved = thumbhash ? resolveThumbhashString(thumbhash) : resolveBlurhashString(blurhash);\n    return _objectSpread(_objectSpread({}, resolved), restSource);\n  }\n  return source != null ? source : null;\n}\nexport function resolveSources(sources) {\n  if (Array.isArray(sources)) {\n    return sources.map(resolveSource).filter(Boolean);\n  }\n  return [resolveSource(sources)].filter(Boolean);\n}","map":{"version":3,"names":["resolveAssetSource","resolveBlurhashString","resolveThumbhashString","isBlurhashString","str","test","isThumbhashString","startsWith","resolveSource","source","uri","blurhash","thumbhash","restSource","_objectWithoutProperties","_excluded","resolved","_objectSpread","resolveSources","sources","Array","isArray","map","filter","Boolean"],"sources":["C:\\Users\\admin\\Desktop\\Weather Forecast\\weatherApp\\node_modules\\expo-image\\src\\utils\\resolveSources.tsx"],"sourcesContent":["import { ImageNativeProps, ImageProps, ImageSource } from '../Image.types';\nimport resolveAssetSource from './resolveAssetSource';\nimport { resolveBlurhashString, resolveThumbhashString } from './resolveHashString';\n\nexport function isBlurhashString(str: string): boolean {\n  return /^(blurhash:\\/)?[\\w#$%*+,\\-.:;=?@[\\]^_{}|~]+(\\/[\\d.]+)*$/.test(str);\n}\n\n// Base64 strings will be recognized as blurhash by default (to keep compatibility),\n// interpret as thumbhash only if correct uri scheme is provided\nexport function isThumbhashString(str: string): boolean {\n  return str.startsWith('thumbhash:/');\n}\n\nfunction resolveSource(source?: ImageSource | string | number | null): ImageSource | null {\n  if (typeof source === 'string') {\n    if (isBlurhashString(source)) {\n      return resolveBlurhashString(source);\n    } else if (isThumbhashString(source)) {\n      return resolveThumbhashString(source);\n    }\n    return { uri: source };\n  }\n  if (typeof source === 'number') {\n    return resolveAssetSource(source);\n  }\n  if (typeof source === 'object' && (source?.blurhash || source?.thumbhash)) {\n    const { blurhash, thumbhash, ...restSource } = source;\n    const resolved = thumbhash\n      ? resolveThumbhashString(thumbhash)\n      : resolveBlurhashString(blurhash as string);\n    return {\n      ...resolved,\n      ...restSource,\n    };\n  }\n  return source ?? null;\n}\n\n/**\n * Resolves provided `source` prop to an array of objects expected by the native implementation.\n */\nexport function resolveSources(sources?: ImageProps['source']): ImageNativeProps['source'] {\n  if (Array.isArray(sources)) {\n    return sources.map(resolveSource).filter(Boolean) as ImageSource[];\n  }\n  return [resolveSource(sources)].filter(Boolean) as ImageSource[];\n}\n"],"mappings":";;;;;AACA,OAAOA,kBAAkB;AACzB,SAASC,qBAAqB,EAAEC,sBAAsB;AAEtD,OAAM,SAAUC,gBAAgBA,CAACC,GAAW;EAC1C,OAAO,yDAAyD,CAACC,IAAI,CAACD,GAAG,CAAC;AAC5E;AAIA,OAAM,SAAUE,iBAAiBA,CAACF,GAAW;EAC3C,OAAOA,GAAG,CAACG,UAAU,CAAC,aAAa,CAAC;AACtC;AAEA,SAASC,aAAaA,CAACC,MAA6C;EAClE,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IAC9B,IAAIN,gBAAgB,CAACM,MAAM,CAAC,EAAE;MAC5B,OAAOR,qBAAqB,CAACQ,MAAM,CAAC;KACrC,MAAM,IAAIH,iBAAiB,CAACG,MAAM,CAAC,EAAE;MACpC,OAAOP,sBAAsB,CAACO,MAAM,CAAC;;IAEvC,OAAO;MAAEC,GAAG,EAAED;IAAM,CAAE;;EAExB,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IAC9B,OAAOT,kBAAkB,CAACS,MAAM,CAAC;;EAEnC,IAAI,OAAOA,MAAM,KAAK,QAAQ,KAAKA,MAAM,YAANA,MAAM,CAAEE,QAAQ,IAAIF,MAAM,YAANA,MAAM,CAAEG,SAAS,CAAC,EAAE;IACzE,IAAQD,QAAQ,GAA+BF,MAAM,CAA7CE,QAAQ;MAAEC,SAAS,GAAoBH,MAAM,CAAnCG,SAAS;MAAKC,UAAU,GAAAC,wBAAA,CAAKL,MAAM,EAAAM,SAAA;IACrD,IAAMC,QAAQ,GAAGJ,SAAS,GACtBV,sBAAsB,CAACU,SAAS,CAAC,GACjCX,qBAAqB,CAACU,QAAkB,CAAC;IAC7C,OAAAM,aAAA,CAAAA,aAAA,KACKD,QAAQ,GACRH,UAAU;;EAGjB,OAAOJ,MAAM,WAANA,MAAM,GAAI,IAAI;AACvB;AAKA,OAAM,SAAUS,cAAcA,CAACC,OAA8B;EAC3D,IAAIC,KAAK,CAACC,OAAO,CAACF,OAAO,CAAC,EAAE;IAC1B,OAAOA,OAAO,CAACG,GAAG,CAACd,aAAa,CAAC,CAACe,MAAM,CAACC,OAAO,CAAkB;;EAEpE,OAAO,CAAChB,aAAa,CAACW,OAAO,CAAC,CAAC,CAACI,MAAM,CAACC,OAAO,CAAkB;AAClE"},"metadata":{},"sourceType":"module","externalDependencies":[]}